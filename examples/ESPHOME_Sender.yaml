esphome:
  name: TempSender
  friendly_name: "TempSender V2"

esp8266:
  board: esp07
    
# Enable logging
logger:
  level: DEBUG
  baud_rate: 0


# Enable Home Assistant API
api:
  encryption:
    key: "iWoJzL3kXLkRfabK2ZnJbkui2m3aYsjn18z7lHb1Src="

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "TempSender Fallback Hotspot"
    password: "0gV2Mud5u99S"

captive_portal:

one_wire:
  - platform: gpio
    pin: GPIO014
web_server:
  version: 3
  port: 80
uart:
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 9600


switch:
  - platform: gpio
    pin: GPIO5
    name: "Heater"
    id: relay
    restore_mode: RESTORE_DEFAULT_OFF
button:
  - platform: restart
    name: "Restart"
number:
  - platform: template
    name: "Heater max temp"
    id: "HeaterMax"
    min_value: 30.0
    max_value: 60.0
    step: 5
    unit_of_measurement: "°C"
    mode: SLIDER
    optimistic: True
    restore_value: True
   
sensor:
  - platform: dallas_temp
    name: temperature
    id: temp
    unit_of_measurement: "°C"
    on_value:
      - uart.write: !lambda |-              
          char buf[128];
          sprintf(buf, "Temp:%.1f", id(temp).state);
          std::string s = buf;
          return std::vector<unsigned char>( s.begin(), s.end() );
            
  - platform: wifi_signal
    name: WiFi signal
    update_interval: 600s
binary_sensor:
  - platform: status
    name: "Status"
    id: statussensor
 
interval:
  - interval: 1s
    then:
      if:
        condition:
          - lambda: 'return id(temp).state > id(HeaterMax).state;'
        then:
          - delay: 2min
          - if:
              condition:
                - lambda: 'return id(temp).state > id(HeaterMax).state;'
              then:
                - switch.turn_off: relay
              
      
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: Version
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: IP
    bssid:
      name: MAC

status_led:
  pin: GPIO2
light:
  - platform: status_led
    name: "Status"
    pin: GPIO16
    internal: True   